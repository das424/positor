/*给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
思路：
1.新建一个链表l3，用以存放l1+l2的和
2.分3种情况，在l1，l2都没到尾的前提下
（1）l1先结束，l2多出来的部分直接加入到l3
（2）l2先结束，l1多出来的部分直接加到l3
（3）两个一起结束，直接相加，不管结果是否大于10
3.遍历l3，先不考虑链表最后一个数，如果l3.val>10，减去10，并在下一个节点上加1
如果链表最后一个数大于10，则减去10，并新建一个节点存1
*/
struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
	struct ListNode* l3=NULL;
	struct ListNode* q;
	q = l3 = (struct ListNode*)malloc(sizeof(struct ListNode)); l3->next = NULL;
	//l1 = l1->next; l2 = l2->next;
	while (l1 != NULL || l2 != NULL) {
		struct ListNode* p3 = (struct ListNode*)malloc(sizeof(struct ListNode)); p3->next = NULL;
		if (l1 == NULL) {
			p3->val = l2->val;
			
				q->next = p3; q = p3;
			
			l2 = l2->next;
		}
		else if (l2 == NULL) {
			p3->val = l1->val;
			
				q->next = p3; q = p3;
			
			l1 = l1->next;
		}
		else
		{
			p3->val = l2->val + l1->val;
			if (l3->next == NULL) {
				l3->next = p3;
				q = p3;
			}
			else {
				q->next = p3; q = p3;
			}
			l1 = l1->next; l2 = l2->next;
		}
	}
	struct ListNode* m = l3->next;
	while (m->next != NULL) {
		if (m->val >= 10) {
			m->val -= 10; m->next->val += 1;
		}
		m = m->next;
	}
	if (m->val >= 10) {
		struct ListNode* p2 = (struct ListNode*)malloc(sizeof(struct ListNode));
		p2->next = NULL;
		m->val -= 10;
		p2->val = 1;
		m->next = p2;
	}
	return l3->next;
}
