/*请你帮忙设计一个程序，用来找出第 n 个丑数。
丑数是可以被 a 或 b 或 c 整除的 正整数。
示例 1：
输入：n = 3, a = 2, b = 3, c = 5
输出：4
解释：丑数序列为 2, 3, 4, 5, 6, 8, 9, 10... 其中第 3 个是 4。
示例 2：
输入：n = 4, a = 2, b = 3, c = 4
输出：6
解释：丑数序列为 2, 3, 4, 6, 8, 9, 10, 12... 其中第 4 个是 6。
示例 3：
输入：n = 5, a = 2, b = 11, c = 13
输出：10
解释：丑数序列为 2, 4, 6, 8, 10, 11, 12, 13... 其中第 5 个是 10。
*/
int min(int a,int b, int c)
{
    if(a<b)
        if(a<c)
            return a;
        else
            return c;
    else
        if(b>c)
            return c;
        else
            return b;
}
int nthUglyNumber(int n, int a, int b, int c)
{
    int end = 0;
    int count = 1;
    int suma = a;
    int sumb = b;
    int sumc = c;
    end = min(a,b,c);
    if(n == 1)
        return end;
    while(count<n)
    {
        if(end%a == 0)
        {
            count++;
            suma = end+a;
            if(suma == sumb)
                if(a<b)
                    sumb = sumb+b;
                else
                    suma = suma+a;
            if(suma == sumc)
                if(a<c)
                    sumc = sumc+c;
                else
                    suma = suma+a;
            end = min(suma,sumb,sumc);
        }
        else if(end%b == 0)
         {
            count++;
            sumb = end+b;
            if(suma == sumb)
                if(a<b)
                    sumb = sumb+b;
                else
                    suma = suma+a;
            if(sumb == sumc)
                if(b<c)
                    sumc = sumc+c;
                else
                    sumb = sumb+b;
            end = min(suma,sumb,sumc);
        }
        else if(end%c == 0)
        {
            count++;
            sumc = end+c;
            if(suma == sumc)
                if(a<c)
                    sumc = sumc+c;
                else
                    suma = suma+a;
            if(sumb == sumc)
                if(b<c)
                    sumc = sumc+c;
                else
                    sumb = sumb+b;
            end = min(suma,sumb,sumc);
        }
        else;
    }
    return end;
}
