/*给定一个机票的字符串二维数组 [from, to]，子数组中的两个成员分别表示飞机出发和降落的机场地点，对该行程进行重新规划排序。
所有这些机票都属于一个从 JFK（肯尼迪国际机场）出发的先生，所以该行程必须从 JFK 开始。

说明:

如果存在多种有效的行程，你可以按字符自然排序返回最小的行程组合。例如，行程 ["JFK", "LGA"] 与 ["JFK", "LGB"] 相比就更小，排序更靠前
所有的机场都用三个大写字母表示（机场代码）。
假定所有机票至少存在一种合理的行程。
示例 1:

输入: [["MUC", "LHR"], ["JFK", "MUC"], ["SFO", "SJC"], ["LHR", "SFO"]]
输出: ["JFK", "MUC", "LHR", "SFO", "SJC"]
示例 2:

输入: [["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
输出: ["JFK","ATL","JFK","SFO","ATL","SFO"]
解释: 另一种有效的行程是 ["JFK","SFO","ATL","JFK","ATL","SFO"]。但是它自然排序更大更靠后。
*/
#define STR_LEN 4

int cmp(const void *str1, const void *str2)
{
    const char **tmp1 = *(char**)str1;
    const char **tmp2 = *(char**)str2;
    int ret = strcmp(tmp1[0], tmp2[0]);
    if (ret == 0) {
        return strcmp(tmp1[1], tmp2[1]);
    }
    return ret;
}

DFS(char ***tickets, int ticketsSize, char *start, int *flag, int *count)
{
    for (int i = 0; i < ticketsSize; i++) {
        if (strcmp(start, tickets[i][0]) == 0 && flag[i] == -1) {
            flag[i] = *count;
             (*count)++;
            char *newstart = tickets[i][1];
            DFS(tickets, ticketsSize, newstart, flag, count);
            if (*count == ticketsSize) {
                return;
            }
            (*count)--;
            flag[i]= -1;
            
        }    
    }
    return;
}

char ** findItinerary(char *** tickets, int ticketsSize, int* ticketsColSize, int* returnSize){
    *returnSize = ticketsSize + 1; 
    int flag[ticketsSize];
    for (int i = 0; i < ticketsSize; i++) {
        flag[i] = -1;
    }

    char *start = "JFK";
    char **res = (char **)malloc(sizeof(char *) * (ticketsSize + 1));
    res[0] = (char *)malloc(sizeof(char) * STR_LEN);
    strncpy(res[0], start, STR_LEN);
    qsort(tickets, ticketsSize, sizeof(tickets[0]), cmp);

    int count = 0;
    DFS(tickets, ticketsSize, start, flag, &count);

    for (int j = 0; j < ticketsSize; j++) {
        res[flag[j] + 1] = (char *)malloc(sizeof(char) * STR_LEN);
        strncpy(res[flag[j] + 1], tickets[j][1], STR_LEN);
    }

    return res;
}
