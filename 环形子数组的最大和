/*给定一个由整数数组 A 表示的环形数组 C，求 C 的非空子数组的最大可能和。
在此处，环形数组意味着数组的末端将会与开头相连呈环状。（形式上，当0 <= i < A.length 时 C[i] = A[i]，而当 i >= 0 时 C[i+A.length] = C[i]）
此外，子数组最多只能包含固定缓冲区 A 中的每个元素一次。（形式上，对于子数组 C[i], C[i+1], ..., C[j]，不存在 i <= k1, k2 <= j 其中 k1 % A.length = k2 % A.length）
示例 1：
输入：[1,-2,3,-2]
输出：3
解释：从子数组 [3] 得到最大和 3
示例 2：
输入：[5,-3,5]
输出：10
解释：从子数组 [5,5] 得到最大和 5 + 5 = 10
*/
int maxSubarraySumCircular(int* A, int ASize){
    int Smin = 0;
    int Smax = 0;
    int Sall = 0;
    int maxS = A[0];
    int minS = A[0];
    int max = A[0];
    for (int i = 0; i < ASize; i++) {
        Sall += A[i];
        if (Sall > Smax) {
            Smax = Sall;
        } else if (Sall < Smin) {
            Smin = Sall;
        }
        maxS = maxS > (Sall - Smin) ? maxS : (Sall - Smin);
        minS = minS < (Sall - Smax) ? minS : (Sall - Smax);
        max = max > A[i] ? max : A[i];
        //printf("%d %d %d %d %d\n", Smin, Smax, Sall, minS, maxS);
    }
    int res = (Sall - minS) > maxS ? (Sall - minS) : maxS;
    return res == 0 ? max : res; 
}
