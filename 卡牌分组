/*给定一副牌，每张牌上都写着一个整数。
此时，你需要选定一个数字 X，使我们可以将整副牌按下述规则分成 1 组或更多组：
每组都有 X 张牌。
组内所有的牌上都写着相同的整数。
仅当你可选的 X >= 2 时返回 true。
示例 1：
输入：[1,2,3,4,4,3,2,1]
输出：true
解释：可行的分组是 [1,1]，[2,2]，[3,3]，[4,4]
示例 2：
输入：[1,1,1,2,2,2,3,3]
输出：false
解释：没有满足要求的分组。
*/
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}

bool hasGroupsSizeX(int* deck, int deckSize){
    bool res=false;
    int i, X, num;

    qsort(deck, deckSize, sizeof(int), cmpfunc);  // 数组从小到大排序
    for(X=1; X<deckSize; X++){  //X:分组的组数
        if(deckSize%X==0){
            num = deckSize/X;  // 每组元素个数
            for(i=0; i<deckSize; i+=num){
                if(deck[i]==deck[i+num-1]){  // 因为已经排好序了，只需要判断每组的首尾元素是否相同
                    res = true;
                }else{
                    res = false;
                    break;
                }
            }
            if(res){
                return res;
            }
        }
    }
    return false;
}
