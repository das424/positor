/*
在计算机界中，我们总是追求用有限的资源获取最大的收益。

现在，假设你分别支配着 m 个 0 和 n 个 1。另外，还有一个仅包含 0 和 1 字符串的数组。

你的任务是使用给定的 m 个 0 和 n 个 1 ，找到能拼出存在于数组中的字符串的最大数量。每个 0 和 1 至多被使用一次。

注意:

给定 0 和 1 的数量都不会超过 100。
给定字符串数组的长度不会超过 600。
示例 1:

输入: Array = {"10", "0001", "111001", "1", "0"}, m = 5, n = 3
输出: 4

解释: 总共 4 个字符串可以通过 5 个 0 和 3 个 1 拼出，即 "10","0001","1","0" 。
示例 2:

输入: Array = {"10", "0", "1"}, m = 1, n = 1
输出: 2

解释: 你可以拼出 "10"，但之后就没有剩余数字了。更好的选择是拼出 "0" 和 "1" 。
*/
#define GET_MAX(a, b) ((a) > (b) ? (a) : (b))
#define GET_MIN(a, b) ((a) < (b) ? (a) : (b))

int findMaxForm(char ** strs, int strsSize, int m, int n){
    int strs_size = strsSize;

    if (strs_size == 0) {
        return (0);
    }

    int i, j, p1, p2;
    int slen;
    int cnt[2][strs_size];
    int kp[m + 1][n + 1];

    memset(cnt, 0, sizeof(cnt));
    memset(kp, 0, sizeof(kp));

    // 先计算字典中每个字符串 0 和 1 的数量，并保存下来。
    for (i = 0; i < strs_size; i ++) {
        slen = strlen(strs[i]);
        for (j = 0; j < slen; j ++) {
            cnt[strs[i][j] - '0'][i] ++;
        }
    }

    for (i = 1; i <= strs_size; i ++) {
        for (p1 = m; p1 >= cnt[0][i - 1]; p1 --) {
            for (p2 = n; p2 >= cnt[1][i - 1]; p2 --) {
                kp[p1][p2] = GET_MAX(kp[p1][p2], kp[p1 - cnt[0][i - 1]][p2 - cnt[1][i - 1]] + 1);
            }
        }
    }

    return (kp[m][n]);
}
