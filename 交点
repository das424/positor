/*给定两条线段（表示为起点start = {X1, Y1}和终点end = {X2, Y2}），如果它们有交点，请计算其交点，没有交点则返回空值。
要求浮点型误差不超过10^-6。若有多个交点（线段重叠）则返回 X 值最小的点，X 坐标相同则返回 Y 值最小的点。
示例 1：
输入：
line1 = {0, 0}, {1, 0}
line2 = {1, 1}, {0, -1}
输出： {0.5, 0}
示例 2：
输入：
line1 = {0, 0}, {3, 3}
line2 = {1, 1}, {2, 2}
输出： {1, 1}
*/
double* intersection(int* start1, int start1Size, int* end1, int end1Size, int* start2, int start2Size, int* end2, int end2Size, int* returnSize){

    /* // xsub * y + ysub * x + inter = 0 // */
    //求两组A、B、C
    int xsub1 = start1[0] - end1[0];
    int ysub1 = end1[1] - start1[1];
    int xsub2 = start2[0] - end2[0];
    int ysub2 = end2[1] - start2[1];
    double inter1 = end1[0] * start1[1] - start1[0] * end1[1];
    double inter2 = end2[0] * start2[1] - start2[0] * end2[1];

    double* ans = (double*)malloc(sizeof(double) * 2);
    *returnSize = 2;

    if (xsub1 * ysub2 == xsub2 * ysub1) {  //可能平行和共线
        if (inter1 != inter2) {  //平行
            *returnSize = 0;
            return 0;
        }
        //以下都是共线，但还有很多特殊情况，共线的线段不一定有交点，而且还有一些mmp的垂直x、y轴的情况，老头疼了
        if ((end1[0] >= start2[0] && start1[0] < start2[0]) || (end1[0] > start2[0] && start1[0] <= start2[0])) {
            ans[0] = (double)start2[0];
            ans[1] = (double)start2[1];
            return ans;
        }
        if ((end1[0] <= start2[0] && start1[0] > start2[0]) || (end1[0] < start2[0] && start1[0] >= start2[0])) {
            ans[0] = end1[0];
            ans[1] = end1[1];
            return ans;
        }
        if ((start1[0] == start2[0] && start1[1] == start2[1]) || (start1[0] == end2[0] && start1[1] == end2[1])){
            ans[0] = (double)start1[0];
            ans[1] = (double)start1[1];
            return ans;
        }
        if ((start2[0] == end1[0] && start2[1] == end1[1]) || (end1[0] == end2[0] && end1[1] == end2[1])){
            ans[0] = (double)end1[0];
            ans[1] = (double)end1[1];
            return ans;
        }
        *returnSize = 0;
        return 0;
    }

    double x = (double)((inter2 * xsub1 - inter1 * xsub2) / (xsub2 * ysub1 - xsub1 * ysub2));
    double y = (double)((inter1 * ysub2 - inter2 * ysub1) / (xsub2 * ysub1 - xsub1 * ysub2));
    ans[0] = x; ans[1] = y;
    
    if (((x <= start1[0] && x >= end1[0]) || (x >= start1[0] && x <= end1[0])) && ((x <= start2[0] && x >= end2[0]) || (x >= start2[0] && x <= end2[0]))) return ans;

    *returnSize = 0;
    return 0;
}
