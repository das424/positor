/*请你实现一个「数字乘积类」ProductOfNumbers，要求支持下述两种方法：
1. add(int num)
将数字 num 添加到当前数字列表的最后面。
2. getProduct(int k)
返回当前数字列表中，最后 k 个数字的乘积。
你可以假设当前列表中始终 至少 包含 k 个数字。
题目数据保证：任何时候，任一连续数字序列的乘积都在 32-bit 整数范围内，不会溢出。
示例：
输入：
["ProductOfNumbers","add","add","add","add","add","getProduct","getProduct","getProduct","add","getProduct"]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
输出：
[null,null,null,null,null,null,20,40,0,null,32]
*/
#define LEN 40001
typedef struct {
    int arr[LEN];
    int id;
} ProductOfNumbers;


ProductOfNumbers* productOfNumbersCreate() {
    ProductOfNumbers *p = (ProductOfNumbers *)malloc(sizeof(ProductOfNumbers));
    p->id = 0;
    return p;
}

void productOfNumbersAdd(ProductOfNumbers* obj, int num) {
    obj->arr[obj->id++] = num;
}

int productOfNumbersGetProduct(ProductOfNumbers* obj, int k) {
    int ans = 1;
    for (int i = obj->id - 1; i >= obj->id - k; i--) {
        ans *= obj->arr[i];
    }
    return ans;
}

void productOfNumbersFree(ProductOfNumbers* obj) {
    free(obj);
}
